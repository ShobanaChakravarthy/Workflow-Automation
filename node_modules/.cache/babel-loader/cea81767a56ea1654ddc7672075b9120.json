{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\laksh\\\\Documents\\\\for git\\\\workflow-automation\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"C:\\\\Users\\\\laksh\\\\Documents\\\\for git\\\\workflow-automation\\\\src\\\\components\\\\TableColCustom.jsx\";\nimport React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport TableCell from \"@material-ui/core/TableCell\";\n\nfunction TableColCustom(props) {\n  var header = props.headers;\n  let res = [];\n  let coll1 = {}; //handle change will store the column value in array\n\n  function handleChange(i, suppVal, e) {\n    e.preventDefault();\n    var a = e.target.value;\n    coll1 = _objectSpread(_objectSpread({}, coll1), {}, {\n      [suppVal]: a\n    }); // if (i === props.totalcols - 1) {\n    //   props.colval(coll1, props.id);\n    // }\n\n    props.colval(coll1, props.id);\n  } //stored column value array will be sent to row\n  //table theme\n\n\n  const StyledTableCell = withStyles(theme => ({\n    head: {\n      backgroundColor: theme.palette.common.black,\n      color: theme.palette.common.white\n    },\n    body: {\n      fontSize: 14\n    }\n  }))(TableCell);\n  tableCol();\n\n  function tableCol() {\n    for (let i = 0; i < props.totalcols; i++) {\n      res.push( /*#__PURE__*/React.createElement(StyledTableCell, {\n        align: \"center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        value: coll1[header[i]],\n        onChange: handleChange.bind(this, i, header[i]),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }\n      })));\n    }\n\n    return res;\n  }\n\n  return res;\n}\n\nexport default TableColCustom;","map":{"version":3,"sources":["C:/Users/laksh/Documents/for git/workflow-automation/src/components/TableColCustom.jsx"],"names":["React","withStyles","TableCell","TableColCustom","props","header","headers","res","coll1","handleChange","i","suppVal","e","preventDefault","a","target","value","colval","id","StyledTableCell","theme","head","backgroundColor","palette","common","black","color","white","body","fontSize","tableCol","totalcols","push","bind"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,SAAP,MAAsB,6BAAtB;;AAEA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC7B,MAAIC,MAAM,GAAGD,KAAK,CAACE,OAAnB;AACA,MAAIC,GAAG,GAAG,EAAV;AACA,MAAIC,KAAK,GAAG,EAAZ,CAH6B,CAI7B;;AACA,WAASC,YAAT,CAAsBC,CAAtB,EAAyBC,OAAzB,EAAkCC,CAAlC,EAAqC;AACnCA,IAAAA,CAAC,CAACC,cAAF;AACA,QAAIC,CAAC,GAAGF,CAAC,CAACG,MAAF,CAASC,KAAjB;AACAR,IAAAA,KAAK,mCAAQA,KAAR;AAAe,OAACG,OAAD,GAAWG;AAA1B,MAAL,CAHmC,CAInC;AACA;AACA;;AACAV,IAAAA,KAAK,CAACa,MAAN,CAAaT,KAAb,EAAoBJ,KAAK,CAACc,EAA1B;AACD,GAb4B,CAe7B;AAEA;;;AACA,QAAMC,eAAe,GAAGlB,UAAU,CAACmB,KAAK,KAAK;AAC3CC,IAAAA,IAAI,EAAE;AACJC,MAAAA,eAAe,EAAEF,KAAK,CAACG,OAAN,CAAcC,MAAd,CAAqBC,KADlC;AAEJC,MAAAA,KAAK,EAAEN,KAAK,CAACG,OAAN,CAAcC,MAAd,CAAqBG;AAFxB,KADqC;AAK3CC,IAAAA,IAAI,EAAE;AACJC,MAAAA,QAAQ,EAAE;AADN;AALqC,GAAL,CAAN,CAAV,CAQpB3B,SARoB,CAAxB;AASA4B,EAAAA,QAAQ;;AACR,WAASA,QAAT,GAAoB;AAClB,SAAK,IAAIpB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,KAAK,CAAC2B,SAA1B,EAAqCrB,CAAC,EAAtC,EAA0C;AACxCH,MAAAA,GAAG,CAACyB,IAAJ,eACE,oBAAC,eAAD;AAAiB,QAAA,KAAK,EAAC,QAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,KAAK,EAAExB,KAAK,CAACH,MAAM,CAACK,CAAD,CAAP,CAFd;AAGE,QAAA,QAAQ,EAAED,YAAY,CAACwB,IAAb,CAAkB,IAAlB,EAAwBvB,CAAxB,EAA2BL,MAAM,CAACK,CAAD,CAAjC,CAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AASD;;AACD,WAAOH,GAAP;AACD;;AACD,SAAOA,GAAP;AACD;;AAED,eAAeJ,cAAf","sourcesContent":["import React from \"react\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\n\r\nfunction TableColCustom(props) {\r\n  var header = props.headers;\r\n  let res = [];\r\n  let coll1 = {};\r\n  //handle change will store the column value in array\r\n  function handleChange(i, suppVal, e) {\r\n    e.preventDefault();\r\n    var a = e.target.value;\r\n    coll1 = { ...coll1, [suppVal]: a };\r\n    // if (i === props.totalcols - 1) {\r\n    //   props.colval(coll1, props.id);\r\n    // }\r\n    props.colval(coll1, props.id);\r\n  }\r\n\r\n  //stored column value array will be sent to row\r\n\r\n  //table theme\r\n  const StyledTableCell = withStyles(theme => ({\r\n    head: {\r\n      backgroundColor: theme.palette.common.black,\r\n      color: theme.palette.common.white\r\n    },\r\n    body: {\r\n      fontSize: 14\r\n    }\r\n  }))(TableCell);\r\n  tableCol();\r\n  function tableCol() {\r\n    for (let i = 0; i < props.totalcols; i++) {\r\n      res.push(\r\n        <StyledTableCell align=\"center\">\r\n          <input\r\n            type=\"text\"\r\n            value={coll1[header[i]]}\r\n            onChange={handleChange.bind(this, i, header[i])}\r\n          />\r\n        </StyledTableCell>\r\n      );\r\n    }\r\n    return res;\r\n  }\r\n  return res;\r\n}\r\n\r\nexport default TableColCustom;\r\n"]},"metadata":{},"sourceType":"module"}